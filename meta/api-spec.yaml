openapi: 3.0.0
info:
  title: Topper.top API
  description: Backend API for Topper.top â€” Universal Ranking Platform
  version: 0.0.1
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /api/health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /api/version:
    get:
      summary: Get application version
      responses:
        '200':
          description: Version response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
  /api/info:
    get:
      summary: Get application information
      responses:
        '200':
          description: Info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
  /api/items:
    get:
      summary: Get list of content items
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          description: Offset for pagination
          required: false
          schema:
            type: integer
            default: 0
        - name: lang
          in: query
          description: Language filter
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort order ('new' or 'top')
          required: false
          schema:
            type: string
            default: 'new'
            enum: [new, top]
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsResponse'
  /api/items/{id}:
    get:
      summary: Get a specific item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Single item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/random:
    get:
      summary: Get a random item
      responses:
        '200':
          description: Random item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomItemResponse'
        '404':
          description: No items available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/ratings:
    post:
      summary: Submit a rating for an item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitRatingRequest'
      responses:
        '200':
          description: Rating submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitRatingResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/leaderboard:
    get:
      summary: Get top-rated items
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 10
            maximum: 100
        - name: lang
          in: query
          description: Language filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of top-rated items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the item
        lang:
          type: string
          description: Language code
        score:
          type: number
          description: Current ranking score
        publishedAt:
          type: string
          format: date-time
          description: Publication date
        tags:
          type: array
          items:
            type: string
          description: List of tags
        name:
          type: string
          description: Name of the item
        title:
          type: string
          description: Title of the item
        description:
          type: string
          description: Description of the item
        url:
          type: string
          format: uri
          description: URL to the item
        type:
          type: string
          description: Type of the content
        category:
          type: string
          description: Category of the item
      required:
        - id
    Ranking:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the ranking
        userId:
          type: string
          description: User identifier (or null for anonymous)
        itemId:
          type: string
          description: ID of the item being ranked
        value:
          type: integer
          enum: [1, -1]
          description: Ranking value (1 for upvote, -1 for downvote)
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
      required:
        - id
        - userId
        - itemId
        - value
        - createdAt
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok]
          description: Health status
      required:
        - status
    VersionResponse:
      type: object
      properties:
        version:
          type: string
          description: Application version
      required:
        - version
    InfoResponse:
      type: object
      properties:
        name:
          type: string
          description: Application name
        version:
          type: string
          description: Application version
        uptimeSeconds:
          type: integer
          description: Application uptime in seconds
      required:
        - name
        - version
        - uptimeSeconds
    ItemsResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items available
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          description: List of items
      required:
        - total
        - items
    ItemResponse:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/Item'
          description: Single item
      required:
        - item
    RandomItemResponse:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/Item'
          description: Randomly selected item
      required:
        - item
    SubmitRankingRequest:
      type: object
      properties:
        itemId:
          type: string
          description: ID of the item to rank
        value:
          type: integer
          enum: [1, -1]
          description: Ranking value (1 for upvote, -1 for downvote)
        userId:
          type: string
          description: Optional user identifier
      required:
        - itemId
        - value
    SubmitRankingResponse:
      type: object
      properties:
        ranking:
          $ref: '#/components/schemas/Ranking'
          description: The created ranking
        item:
          type: object
          properties:
            id:
              type: string
            score:
              type: number
          description: Updated item information
        nextItem:
          $ref: '#/components/schemas/Item'
          description: Suggested next item
      required:
        - ranking
        - item
    LeaderboardResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          description: List of top-rated items
      required:
        - items
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
