/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health check endpoint */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['HealthResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/version': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get application version */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Version response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['VersionResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get application information */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Info response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['InfoResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/items': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get list of content items */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of items to return (max 100) */
          limit?: number;
          /** @description Offset for pagination */
          offset?: number;
          /** @description Language filter */
          lang?: string;
          /** @description Sort order ('new' or 'top') */
          sort?: 'new' | 'top';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of items */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ItemsResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/items/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific item by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Single item */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ItemResponse'];
          };
        };
        /** @description Item not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/random': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a random item */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Random item */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RandomItemResponse'];
          };
        };
        /** @description No items available */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ratings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Submit a rating for an item */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['SubmitRatingRequest'];
        };
      };
      responses: {
        /** @description Rating submitted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SubmitRatingResponse'];
          };
        };
        /** @description Invalid payload */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
        /** @description Item not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/leaderboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get top-rated items */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of items to return (max 100) */
          limit?: number;
          /** @description Language filter */
          lang?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of top-rated items */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LeaderboardResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Item: {
      /** @description Unique identifier for the item */
      id: string;
      /** @description Language code */
      lang?: string;
      /** @description Current rating score */
      score?: number;
      /**
       * Format: date-time
       * @description Publication date
       */
      publishedAt?: string;
      /** @description List of tags */
      tags?: string[];
      /** @description Name of the item */
      name?: string;
      /** @description Title of the item */
      title?: string;
      /** @description Description of the item */
      description?: string;
      /**
       * Format: uri
       * @description URL to the item
       */
      url?: string;
      /** @description Type of the content */
      type?: string;
      /** @description Category of the item */
      category?: string;
    };
    Rating: {
      /** @description Unique identifier for the rating */
      id: string;
      /** @description User identifier (or null for anonymous) */
      userId: string;
      /** @description ID of the item being rated */
      itemId: string;
      /**
       * @description Rating value (1 for upvote, -1 for downvote)
       * @enum {integer}
       */
      value: 1 | -1;
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      createdAt: string;
    };
    HealthResponse: {
      /**
       * @description Health status
       * @enum {string}
       */
      status: 'ok';
    };
    VersionResponse: {
      /** @description Application version */
      version: string;
    };
    InfoResponse: {
      /** @description Application name */
      name: string;
      /** @description Application version */
      version: string;
      /** @description Application uptime in seconds */
      uptimeSeconds: number;
    };
    ItemsResponse: {
      /** @description Total number of items available */
      total: number;
      /** @description List of items */
      items: components['schemas']['Item'][];
    };
    ItemResponse: {
      /** @description Single item */
      item: components['schemas']['Item'];
    };
    RandomItemResponse: {
      /** @description Randomly selected item */
      item: components['schemas']['Item'];
    };
    SubmitRatingRequest: {
      /** @description ID of the item to rate */
      itemId: string;
      /**
       * @description Rating value (1 for upvote, -1 for downvote)
       * @enum {integer}
       */
      value: 1 | -1;
      /** @description Optional user identifier */
      userId?: string;
    };
    SubmitRatingResponse: {
      /** @description The created rating */
      rating: components['schemas']['Rating'];
      /** @description Updated item information */
      item: {
        id?: string;
        score?: number;
      };
      /** @description Suggested next item */
      nextItem?: components['schemas']['Item'];
    };
    LeaderboardResponse: {
      /** @description List of top-rated items */
      items: components['schemas']['Item'][];
    };
    ErrorResponse: {
      /** @description Error message */
      error: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
